// Code generated by MockGen. DO NOT EDIT.
// Source: replaceRule.go
//
// Generated by this command:
//
//	mockgen -source=replaceRule.go -destination=../../mocks/mock_replaceRule.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReplaceRule is a mock of ReplaceRule interface.
type MockReplaceRule struct {
	ctrl     *gomock.Controller
	recorder *MockReplaceRuleMockRecorder
}

// MockReplaceRuleMockRecorder is the mock recorder for MockReplaceRule.
type MockReplaceRuleMockRecorder struct {
	mock *MockReplaceRule
}

// NewMockReplaceRule creates a new mock instance.
func NewMockReplaceRule(ctrl *gomock.Controller) *MockReplaceRule {
	mock := &MockReplaceRule{ctrl: ctrl}
	mock.recorder = &MockReplaceRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplaceRule) EXPECT() *MockReplaceRuleMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockReplaceRule) Apply(arg0 string, arg1 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockReplaceRuleMockRecorder) Apply(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockReplaceRule)(nil).Apply), arg0, arg1)
}

// Match mocks base method.
func (m *MockReplaceRule) Match(arg0 string, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockReplaceRuleMockRecorder) Match(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockReplaceRule)(nil).Match), arg0, arg1)
}
